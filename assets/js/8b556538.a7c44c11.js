(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[279],{3905:function(e,t,a){"use strict";a.d(t,{Zo:function(){return u},kt:function(){return f}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),m=l(a),f=r,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||o;return a?n.createElement(d,i(i({ref:t},u),{},{components:a})):n.createElement(d,i({ref:t},u))}));function f(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},8069:function(e,t,a){"use strict";a.r(t),a.d(t,{frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c},default:function(){return u}});var n=a(2122),r=a(9756),o=(a(7294),a(3905)),i={id:"contact_area",title:"Contact Area Estimation",sidebar_label:"Contact Area Estimation"},s={unversionedId:"tutorials/tasks/contact_area",id:"tutorials/tasks/contact_area",isDocsHomePage:!1,title:"Contact Area Estimation",description:"The ContactArea task estimates the major and minor axis of the surface contact.",source:"@site/docs/tutorials/tasks/contact_area.md",sourceDirName:"tutorials/tasks",slug:"/tutorials/tasks/contact_area",permalink:"/PyTouch/docs/tutorials/tasks/contact_area",editUrl:"https://github.com/facebookresearch/pytouch/edit/master/website/docs/tutorials/tasks/contact_area.md",version:"current",sidebar_label:"Contact Area Estimation",frontMatter:{id:"contact_area",title:"Contact Area Estimation",sidebar_label:"Contact Area Estimation"},sidebar:"docs",previous:{title:"Slip Detection",permalink:"/PyTouch/docs/tutorials/tasks/slip"}},c=[{value:"Usage",id:"usage",children:[]}],l={toc:c};function u(e){var t=e.components,i=(0,r.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,n.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ContactArea")," task estimates the major and minor axis of the surface contact."),(0,o.kt)("p",null,"A base image sample, ",(0,o.kt)("inlineCode",{parentName:"p"},"base")," is provided when initializing the task. This base image sample is an image without any contact applied to the surface of the sensor. This base image is used for all future estimations unless changed."),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"Calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"ContactArea")," task with a sample from the sensor returns the major and minor axis of the estimated contact and draws directly to the sample the contact ellipse."),(0,o.kt)("p",null,"This can be initialized through ",(0,o.kt)("inlineCode",{parentName:"p"},"pytouch.tasks.ContactArea")," such as:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"from pytouch.tasks import ContactArea\n\nbase_img = ...\nsample_img = ...\ncontact_area = ContactArea(base=base_img)\n\nmajor, minor = contact_area(sample_img)\n")),(0,o.kt)("p",null,"An example of saving ",(0,o.kt)("inlineCode",{parentName:"p"},"sample_img")," after calling ",(0,o.kt)("inlineCode",{parentName:"p"},"contact_area(sample_img)"),","),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Contact Area Example",src:a(3891).Z})))}u.isMDXComponent=!0},3891:function(e,t,a){"use strict";t.Z=a.p+"assets/images/example-c4328b19bd69455298d3c1e81b82c608.png"}}]);