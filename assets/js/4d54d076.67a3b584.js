(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[80],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=u(n),m=r,f=d["".concat(s,".").concat(m)]||d[m]||p[m]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3250:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return a},metadata:function(){return l},toc:function(){return s},default:function(){return c}});var o=n(2122),r=n(9756),i=(n(7294),n(3905)),a={id:"contributing",title:"Contributing to PyTouch",sidebar_label:"Contributing"},l={unversionedId:"contributing",id:"contributing",isDocsHomePage:!1,title:"Contributing to PyTouch",description:"We welcome the touch sensing community to contribute new tasks to the PyTouch library.",source:"@site/docs/contributing.md",sourceDirName:".",slug:"/contributing",permalink:"/PyTouch/docs/contributing",editUrl:"https://github.com/facebookresearch/pytouch/edit/master/website/docs/contributing.md",version:"current",sidebar_label:"Contributing",frontMatter:{id:"contributing",title:"Contributing to PyTouch",sidebar_label:"Contributing"},sidebar:"docs",previous:{title:"Usage",permalink:"/PyTouch/docs/usage"},next:{title:"Tutorial Intro",permalink:"/PyTouch/docs/tutorials/intro"}},s=[{value:"Experiment",id:"experiment",children:[]},{value:"PyTouch Model",id:"pytouch-model",children:[]},{value:"PyTouch Task",id:"pytouch-task",children:[]},{value:"Verification",id:"verification",children:[]},{value:"Submission",id:"submission",children:[]}],u={toc:s};function c(e){var t=e.components,a=(0,r.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"We welcome the touch sensing community to contribute new tasks to the PyTouch library."),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"Contribution Process",src:n(6290).Z})),(0,i.kt)("h3",{id:"experiment"},"Experiment"),(0,i.kt)("p",null,"Perform your experiment with any suitable platform and export the models as ",(0,i.kt)("inlineCode",{parentName:"p"},"PyTorch")," models or ",(0,i.kt)("inlineCode",{parentName:"p"},"ONNX")," models."),(0,i.kt)("h3",{id:"pytouch-model"},"PyTouch Model"),(0,i.kt)("p",null,"Create a new model file ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name.py")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"pytouch/models"),". This model file can contain the necessary setup for initializing from pre-trained weights and parameters."),(0,i.kt)("h3",{id:"pytouch-task"},"PyTouch Task"),(0,i.kt)("p",null,"Create a new task file ",(0,i.kt)("inlineCode",{parentName:"p"},"task_name.py")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"pytouch/tasks"),"."),(0,i.kt)("p",null,"An example template for a task,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'class MyNewTask(nn.Module):\n    def __init__(\n        self,\n        sensor,\n        zoo_model="default_model_to_use",\n        model_path=None,\n        transform=None,\n        defaults=MyNewTaskDefaults,\n        **kwargs\n    ):\n        self.sensor = sensor\n        self.model_path = model_path\n        self.transform = transform if transform is not None else self._transforms()\n        self.defaults = defaults\n\n        if model_path is not None:\n            # load custom model from path\n            state_dict = PyTouchZoo.load_model(model_path)\n        else:\n            # load model from pytouch zoo\n            zoo = PyTouchZoo()\n            state_dict = zoo.load_model_from_zoo(zoo_model, sensor)\n        self.model = MyNewTaskModel(state_dict=state_dict)\n\n    def __call__(self, input):\n        return self.task(frame)\n\n    def task(self, input):\n        output = ... #process inputs\n        return output\n')),(0,i.kt)("h3",{id:"verification"},"Verification"),(0,i.kt)("p",null,"Create a new PR on the GitHub repository and provide the following info:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Model file(s)"),(0,i.kt)("li",{parentName:"ul"},"Model description"),(0,i.kt)("li",{parentName:"ul"},"Model performance information")),(0,i.kt)("h3",{id:"submission"},"Submission"),(0,i.kt)("p",null,"Upon PR acceptance, the model files will be available through the PyTouch Model Zoo."))}c.isMDXComponent=!0},6290:function(e,t,n){"use strict";t.Z=n.p+"assets/images/process-93dc7572be1721ebc5ea5bc77cef1e6a.png"}}]);