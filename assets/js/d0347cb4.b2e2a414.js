(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[834],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(f,l(l({ref:t},c),{},{components:n})):r.createElement(f,l({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,l=new Array(i);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1108:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return l},metadata:function(){return o},toc:function(){return p},default:function(){return c}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),l={id:"slip",title:"Slip Detection",sidebar_label:"Slip Detection"},o={unversionedId:"tutorials/tasks/slip",id:"tutorials/tasks/slip",isDocsHomePage:!1,title:"Slip Detection",description:"The SlipDetect task predicts if an object has slipped while being grasped.",source:"@site/docs/tutorials/tasks/slip.md",sourceDirName:"tutorials/tasks",slug:"/tutorials/tasks/slip",permalink:"/PyTouch/docs/tutorials/tasks/slip",editUrl:"https://github.com/facebookresearch/pytouch/edit/master/website/docs/tutorials/tasks/slip.md",version:"current",sidebar_label:"Slip Detection",frontMatter:{id:"slip",title:"Slip Detection",sidebar_label:"Slip Detection"},sidebar:"docs",previous:{title:"Touch Detection",permalink:"/PyTouch/docs/tutorials/tasks/touch"},next:{title:"Contact Area Estimation",permalink:"/PyTouch/docs/tutorials/tasks/contact_area"}},p=[{value:"Available Pre-Trained Models",id:"available-pre-trained-models",children:[]},{value:"Input",id:"input",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Normalization",id:"normalization",children:[]}],s={toc:p};function c(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SlipDetect")," task predicts if an object has slipped while being grasped."),(0,i.kt)("h3",{id:"available-pre-trained-models"},"Available Pre-Trained Models"),(0,i.kt)("p",null,"The following pre-trained models are available for use with the ",(0,i.kt)("inlineCode",{parentName:"p"},"SlipDetect")," task:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Dataset"),(0,i.kt)("th",{parentName:"tr",align:null},"Model Name"),(0,i.kt)("th",{parentName:"tr",align:null},"Accuracy"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"DIGIT"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"slipdetect_resnet18")),(0,i.kt)("td",{parentName:"tr",align:null},"xx.yy")))),(0,i.kt)("h3",{id:"input"},"Input"),(0,i.kt)("p",null,"Input into the ",(0,i.kt)("inlineCode",{parentName:"p"},"SlipDetect")," task expects a ",(0,i.kt)("inlineCode",{parentName:"p"},"12")," consecutive frames to predict if slip has occured."),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Initialize the ",(0,i.kt)("inlineCode",{parentName:"p"},"SlipDetect")," task with a sensor and pre-trained model,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},'slip_detect = SlipDetect(DigitSensor, zoo_model="slipdetect_resnet18")\n')),(0,i.kt)("h3",{id:"normalization"},"Normalization"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"SlipDetect")," task loads default transform and normalization values from ",(0,i.kt)("inlineCode",{parentName:"p"},"pytouch.models.slip_detect.SlipDetectModelDefaults")," and is suitable for any pre-trained model from the ",(0,i.kt)("inlineCode",{parentName:"p"},"TorchVision")," package."),(0,i.kt)("p",null,"For custom models provide a custom class when initializing ",(0,i.kt)("inlineCode",{parentName:"p"},"SlipDetect")," in the format of:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"slip_detect = SlipDetect(model=my_custom_model, defaults=MySlipDetectValues)\n\n")),(0,i.kt)("p",null,"Where ",(0,i.kt)("inlineCode",{parentName:"p"},"MySlipDetectValues")," are in the following format,"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"class MySlipDetectValues:\n    SCALES = [64, 64]\n    MEANS = [0.123, 0.123, 0.123]\n    STDS = [0.123, 0.123, 0.123]\n")))}c.isMDXComponent=!0}}]);